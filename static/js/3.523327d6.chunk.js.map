{"version":3,"sources":["components/Form/form.module.css","components/Filter/filter.module.css","redux/operations.js","components/Form/Form.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Notification/Notification.js","view/contacts.js"],"names":["module","exports","axios","defaults","baseURL","Form","useState","name","number","state","setState","dispatch","useDispatch","items","useSelector","phonebook","contacts","handleNameChange","target","value","prev","className","styles","form","onSubmit","e","preventDefault","param","input","elements","flag","map","el","getState","a","getFormValueFetch","post","data","getFormValueSuccess","id","getFormValueError","setNotify","reset","label","type","onChange","button","connect","filteredItems","deleteContact","removeFilteredArr","deleteContactAsync","delete","console","log","TransitionGroup","component","item","CSSTransition","key","timeout","classNames","unmountOnExit","onClick","mapDispatchToProps","getFilterValue","setFilteredArr","filter","Notification","setLocalData","getDataFromDB","getDBFetch","get","getDBSuccess","getDBError","notify","isLoading","props","useEffect","in","onEntered","appear","length"],"mappings":"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","file":"static/js/3.523327d6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"form_form__1QW75\",\"label\":\"form_label__2uZwQ\",\"input\":\"form_input__14aI-\",\"button\":\"form_button__3u1KK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"filter_title__3fiTV\",\"input\":\"filter_input__1xkXd\"};","import axios from 'axios';\nimport {\n  getFormValueFetch,\n  getFormValueSuccess,\n  getFormValueError,\n  getDBFetch,\n  getDBSuccess,\n  getDBError,\n} from './actions';\n\n// import store from './store';\n\naxios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com';\n\n// const token = {\n//   set(token) {\n//     axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n//   },\n\n//   unset() {\n//     axios.defaults.headers.common.Authorization = '';\n//   },\n// };\n\nexport const getDataFromDB = param => async (dispatch, getState) => {\n  dispatch(getDBFetch());\n  try {\n    // const keys = Object.keys(data.data);\n\n    // const result = keys.reduce((acc, key) => {\n    //   acc.push({ id: key, ...data.data[key] });\n\n    //   return acc;\n    // }, []);\n    const data = await axios.get(`/contacts`);\n    dispatch(getDBSuccess(data.data));\n  } catch (e) {\n    if (e) {\n      getDBError(e);\n    }\n  }\n};\n\nexport const postFormValueAsync = param => async (dispatch, getState) => {\n  dispatch(getFormValueFetch());\n  try {\n    const data = await axios.post(`/contacts`, param);\n    dispatch(getFormValueSuccess({ ...param, id: data.data.name }));\n  } catch (e) {\n    dispatch(getFormValueError(e));\n  } finally {\n    dispatch(getFormValueFetch());\n  }\n};\n\nexport const deleteContactAsync = param => async (dispatch, getState) => {\n  try {\n    await axios.delete(`/contacts/${param}`);\n  } catch (e) {\n    console.log(e);\n  }\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport styles from './form.module.css';\nimport { setNotify } from '../../redux/actions';\nimport { postFormValueAsync } from '../../redux/operations';\n\n// { items, setNotify, getFormValueAsync, getFormValueFromFireBase }\nfunction Form() {\n  const [state, setState] = useState({ name: '', number: '' });\n\n  const dispatch = useDispatch();\n  const items = useSelector(state => state.phonebook.contacts.items);\n\n  const handleNameChange = ({ target: { name, value } }) => {\n    setState(prev => ({ ...prev, [name]: value }));\n  };\n\n  const hanndleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    if (state.name === '' || state.number === '') {\n      return;\n    } else {\n      const input = e.target.elements;\n      let flag = true;\n\n      items.map(el => (el.name === input[0].value ? (flag = false) : ''));\n\n      flag\n        ? dispatch(\n            postFormValueAsync({\n              name: input[0].value,\n              number: input[1].value,\n            }),\n          )\n        : dispatch(setNotify(true));\n    }\n\n    form.reset();\n  };\n\n  return (\n    <form className={styles.form} onSubmit={hanndleSubmit}>\n      <label className={styles.label}>\n        Name:\n        <input\n          className={styles.input}\n          type=\"text\"\n          name=\"name\"\n          onChange={handleNameChange}\n        ></input>\n      </label>\n      <label className={styles.label}>\n        Phone:\n        <input\n          className={styles.input}\n          type=\"tel\"\n          name=\"number\"\n          onChange={handleNameChange}\n        ></input>\n      </label>\n\n      <button className={styles.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nForm.propTypes = {\n  getContact: PropTypes.func,\n  getName: PropTypes.func,\n};\n\n// const mapStateToProps = state => ({ items: state.contacts.items });\n\n// const mapDispatchToProps = { setNotify, getFormValueAsync, getFormValueFromFireBase };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Form);\n\nexport default Form;\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//? На классах\n// export class Form extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   handleNameChange = ({ target: { name, value } }) => {\n//     this.setState({ [name]: value });\n//     this.props.getName(this.state.name);\n//   };\n\n//   hanndleSubmit = e => {\n//     e.preventDefault();\n//     this.props.getContact({ ...this.state, id: uuidv4() });\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n//     return (\n//       <form className={styles.form} onSubmit={this.hanndleSubmit}>\n//         <label className={styles.label}>\n//           Name:\n//           <input\n//             className={styles.input}\n//             type=\"text\"\n//             name=\"name\"\n//             value={name}\n//             onChange={this.handleNameChange}\n//           ></input>\n//         </label>\n//         <label className={styles.label}>\n//           Phone:\n//           <input\n//             className={styles.input}\n//             type=\"tel\"\n//             name=\"number\"\n//             value={number}\n//             onChange={this.handleNameChange}\n//           ></input>\n//         </label>\n\n//         <button className={styles.button} type=\"submit\">\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteContact, removeFilteredArr } from '../../redux/actions';\nimport './contactList.css';\nimport { deleteContactAsync } from '../../redux/operations';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nfunction ContactList({\n  value,\n  deleteContact,\n  removeFilteredArr,\n  deleteContactAsync,\n}) {\n  const handleButtonClick = id => {\n    deleteContactAsync(id);\n    deleteContact(id);\n    removeFilteredArr();\n  };\n\n  return (\n    <TransitionGroup component=\"ul\" className=\"list\">\n      {value.map(item => {\n        return (\n          <CSSTransition\n            key={item.id}\n            timeout={250}\n            classNames=\"adddelete\"\n            unmountOnExit\n          >\n            <li className=\"item\" key={item.id}>\n              <div className=\"wrapper\">\n                <span>{item.name}</span>\n                <span>: {item.number}</span>\n              </div>\n              <button\n                className=\"button\"\n                onClick={() => handleButtonClick(item.id)}\n              >\n                Delete\n              </button>\n            </li>\n          </CSSTransition>\n        );\n      })}\n    </TransitionGroup>\n  );\n}\n\nContactList.propTypes = {\n  contactList: PropTypes.arrayOf(PropTypes.object),\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  deleteContact: PropTypes.func,\n};\nconst mapStateToProps = state => ({\n  value: state.phonebook.contacts.filteredItems\n    ? state.phonebook.contacts.filteredItems\n    : state.phonebook.contacts.items,\n});\nexport default connect(mapStateToProps, {\n  deleteContact,\n  removeFilteredArr,\n  deleteContactAsync,\n})(ContactList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './filter.module.css';\nimport {\n  getFilterValue,\n  setFilteredArr,\n  removeFilteredArr,\n} from '../../redux/actions';\n\nimport { connect } from 'react-redux';\n\nfunction Filter({ filter, getFilterValue, setFilteredArr, removeFilteredArr }) {\n  const getName = ({ target: { value } }) => {\n    getFilterValue(value);\n    setFilteredArr(value);\n    if (value === '') {\n      removeFilteredArr();\n    }\n  };\n\n  return (\n    <>\n      <input\n        className={styles.input}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={getName}\n      />\n    </>\n  );\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  getFilterName: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({ filter: state.phonebook.contacts.filter });\n\nconst mapDispatchToProps = {\n  getFilterValue,\n  setFilteredArr,\n  removeFilteredArr,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport './notification.css';\n\nexport const Notification = () => {\n  return <div className=\"notify\">This contact is already in exist!</div>;\n};\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport Form from '../components/Form/Form';\nimport ContactList from '../components/ContactList/ContactList';\nimport Filter from '../components/Filter/Filter';\nimport { Notification } from '../components/Notification/Notification';\nimport { setLocalData, setNotify } from '../redux/actions';\n\nimport { CSSTransition } from 'react-transition-group';\nimport { getDataFromDB } from '../redux/operations';\nimport './contacts.css';\n\nfunction Contacts(props) {\n \n\n  useEffect(() => {\n    props.getDataFromDB();\n  }, [])\n\n  return (\n    <>\n      <CSSTransition\n        in={props.notify}\n        timeout={2000}\n        classNames=\"notify\"\n        unmountOnExit\n        onEntered={() => props.setNotify(false)}\n      >\n        <Notification />\n      </CSSTransition>\n      <CSSTransition\n        in={true}\n        appear={true}\n        timeout={2000}\n        classNames=\"op\"\n        unmountOnExit\n      >\n        <h2 className=\"title\">Phonebook</h2>\n      </CSSTransition>\n      <Form />\n      <CSSTransition\n        in={props.value.length >= 1}\n        timeout={300}\n        unmountOnExit\n        classNames=\"title-contacts\"\n      >\n        <h2 className=\"title-contacts\">Contacts</h2>\n      </CSSTransition>\n\n      {props.isLoading && <h2> ..... loading</h2>}\n\n      <CSSTransition\n        in={props.value.length >= 2}\n        timeout={300}\n        unmountOnExit\n        classNames=\"filter\"\n      >\n        <Filter />\n      </CSSTransition>\n      <ContactList />\n    </>\n  );\n}\n\nconst mapStateToProps = state => ({\n  value: state.phonebook.contacts.items,\n  filter: state.phonebook.contacts.filter,\n  notify: state.phonebook.contacts.setNotify,\n  isLoading: state.phonebook.isLoading,\n});\n\nconst mapDispatchToProps = { setLocalData, setNotify, getDataFromDB };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\n"],"sourceRoot":""}