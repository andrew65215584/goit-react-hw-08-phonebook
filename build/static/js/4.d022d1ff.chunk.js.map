{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","view/login.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","Login","dispatch","useDispatch","useState","email","setEmail","password","setpassword","className","onSubmit","evt","preventDefault","user","loginUser","onChange","target","type"],"mappings":"kNAIe,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,wFIqCvFC,UArCD,WACZ,IAAMC,EAAWC,cADC,EAGQC,mBAAS,IAHjB,mBAGXC,EAHW,KAGJC,EAHI,OAIcF,mBAAS,IAJvB,mBAIXG,EAJW,KAIDC,EAJC,KAelB,OACE,oCACE,wBAAIC,UAAU,mBAAd,mCACA,0BAAMC,SAZW,SAAAC,GACnBA,EAAIC,iBACJ,IAAMC,EAAO,CAAER,QAAOE,YAEtBL,EAASY,YAAUD,IAEnBP,EAAS,IACTE,EAAY,KAKoBC,UAAU,kBACtC,2BAAOA,UAAU,SAAjB,QAEE,2BAAOM,SAAU,SAAAJ,GAAG,OAAIL,EAASK,EAAIK,OAAOpB,QAAQA,MAAOS,KAG7D,2BAAOI,UAAU,SAAjB,WAEE,2BACEM,SAAU,SAAAJ,GAAG,OAAIH,EAAYG,EAAIK,OAAOpB,QACxCA,MAAOW,KAGX,4BAAQU,KAAK,UAAb","file":"static/js/4.d022d1ff.chunk.js","sourcesContent":["import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { loginUser } from '../redux/auth/authOperation';\nimport './contacts.css';\n\nconst Login = () => {\n  const dispatch = useDispatch();\n\n  const [email, setEmail] = useState('');\n  const [password, setpassword] = useState('');\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const user = { email, password };\n\n    dispatch(loginUser(user));\n\n    setEmail('');\n    setpassword('');\n  };\n  return (\n    <>\n      <h2 className=\"title-logandreg\">Войти </h2>\n      <form onSubmit={handleSubmit} className=\"display-column\">\n        <label className=\"label\">\n          Email\n          <input onChange={evt => setEmail(evt.target.value)} value={email} />\n        </label>\n\n        <label className=\"label\">\n          Password\n          <input\n            onChange={evt => setpassword(evt.target.value)}\n            value={password}\n          />\n        </label>\n        <button type=\"submit\">Войти</button>\n      </form>\n    </>\n  );\n};\n\nexport default Login;\n"],"sourceRoot":""}